<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.jimcarry.mapper.PaymentMapper">
    <!-- 추가 -->
    <insert id="insert">
        insert into tbl_payment
        (user_id, storage_id, payment_amount)
        values(#{userId}, #{storageId}, #{paymentAmount})
    </insert>
    <!-- 전체조회 -->
    <select id="selectAll" resultType="paymentVO">
        select pay_id, user_id, storage_id, payment_date, payment_amount
        select tbl_payment
        limit #{page.criteria.startRow}, ${page.criteria.amount}
    </select>

    <!-- 유저 정보조회 -->
    <select id="selectUser" resultType="UserVO">
        select user_name, user_phone, user_email from tbl_user
        where user_id = #{user_id}
    </select>

    <!-- 창고 정보조회-->
    <select id="selectStorage" resultType="paymentDTO">
        select t.storage_id, t.user_id, storage_title, storage_price, pay_id, payment_amount, p.payment_amount * t.storage_price AS total_price
        from tbl_storage t
        join tbl_payment p on t.storage_id = p.storage_id
    </select>

    <select id="selectAllPayment" resultType="paymentDTO">
        select pu.user_id, user_identification, user_password, user_email, user_phone, user_address, user_address_detail,
        user_gender, user_birth, user_name, pay_id, s.storage_id, payment_date, payment_amount, storage_title, storage_size, storage_price,
        storage_address, storage_address_detail, storage_use_date, storage_end_date
        from
        (select u.user_id, user_identification, user_password, user_email, user_phone, user_address, user_address_detail,
        user_gender, user_birth, user_name, pay_id, p.storage_id, payment_date, payment_amount from tbl_user u join tbl_payment p
        on u.user_id = p.user_id) pu join tbl_storage s
        on pu.storage_id = s.storage_id
        <include refid="searchType"/>
        order by pay_id
        <if test="page.searchDTO.isDesc">
            desc
        </if>
        limit #{page.criteria.startRow}, #{page.criteria.amount}
    </select>
    <select id="selectPaymentId" resultType="paymentDTO">
        select pu.user_id, user_identification, user_password, user_email, user_phone, user_address, user_address_detail,
        user_gender, user_birth, user_name, pay_id, s.storage_id, payment_date, payment_amount, storage_title, storage_size, storage_price,
        storage_address, storage_address_detail, storage_use_date, storage_end_date
        from
        (select u.user_id, user_identification, user_password, user_email, user_phone, user_address, user_address_detail,
        user_gender, user_birth, user_name, pay_id, p.storage_id, payment_date, payment_amount from tbl_user u join tbl_payment p
        on u.user_id = p.user_id) pu join tbl_storage s
        on pu.storage_id = s.storage_id
        where pay_id = #{payId}
        order by pay_id
    </select>

    <!-- 조회 -->
    <select id="select" resultType="paymentVO">
        select pay_id, user_id, storage_id, payment_date, payment_amount
        from tbl_payment
        where pay_id = #{paymentId}
    </select>
    <!-- 수정 -->
    <update id="update">
        update tbl_payment
        set user_id=#{userId}, storage_id=#{storageId}, payment_date=#{paymentDate}
        where pay_id= #{payId}
    </update>
    <!-- 삭제 -->
    <delete id="delete" parameterType="long">
        delete from tbl_payment
        where pay_id = #{payId}
    </delete>
    <select id="selectAllBy" resultType="paymentVO">
        select pay_id, user_id, storage_id, payment_date, payment_amount
        from tbl_payment
        <include refid="searchType"/>
        order by pay_id
        <if test="page.searchDTO.isDesc">
            desc
        </if>
        limit #{page.criteria.startRow}, #{page.criteria.amount}
    </select>
    <!--총 개수-->
    <select id="total" resultType="int">
        select count(pay_id) from tbl_payment
    </select>
    <!-- 총 결제 금액-->
    <select id="totalPay" resultType="int">
        select sum(payment_amount)
        from tbl_payment;
    </select>

    <!-- 검색조건에 맞는 총 갯수 -->
    <select id="totalBy" resultType="int">
        select count(pay_id) from tbl_payment
        <include refid="searchType"/>
    </select>
    <select id="totalPayCount" resultType="int">
        select count(pay_id) from tbl_storage s join tbl_payment p on s.storage_id = p.storage_id
        <include refid="searchType"/>
    </select>

    <!--  PageDTO인지 SearchDTO인지 판별  -->
    <sql id="searchType">
        <choose>
            <when test="page.IS_SEARCH_DTO">
                <bind name="dto" value="page"/>
            </when>
            <otherwise>
                <bind name="dto" value="page.searchDTO"/>
            </otherwise>
        </choose>
        <if test="dto.types != null">
            <include refid="searchContext"/>
        </if>
    </sql>
    <!--  조건에 맞는 테이블 검색조건  -->
    <sql id="searchContext">
        where
        <trim prefixOverrides="and">
            <foreach collection="dto.types" item="type">
                <trim prefix="and">
                    <choose>
                        <when test="type == 'userId'.toString()">
                            user_id = #{dto.userId}
                        </when>
                        <when test="type == 'storageSize'.toString()">
                            storage_size like concat('%', #{dto.storageSize}, '%')
                        </when>
                        <when test="type == 'storageAddress'.toString()">
                            storage_address like concat('%', #{dto.storageAddress}, '%')
                        </when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>
    <select id="selectPayment" resultType="paymentDTO">
        SELECT p.pay_id, p.user_id, p.storage_id, p.payment_date, p.payment_amount, s.storage_price, p.payment_amount * s.storage_price AS total_price
        FROM tbl_payment p
        JOIN tbl_storage s ON p.storage_id = s.storage_id
    </select>
</mapper>