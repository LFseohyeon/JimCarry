<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.jimcarry.mapper.StorageMapper">
    <insert id="insert" useGeneratedKeys="true" keyProperty="storageId">
        insert into tbl_storage
        (user_id, storage_name, storage_phone, storage_title, storage_size, storage_price, storage_address, storage_address_detail, storage_use_date, storage_end_date)
        values(
        #{userId}, #{storageName}, #{storagePhone}, #{storageTitle}, #{storageSize}, #{storagePrice},
         #{storageAddress}, #{storageAddressDetail},
        #{storageUseDate}, #{storageEndDate}
        )
    </insert>
    <!--  조회  -->
    <select id="select" resultType="storageVO">
        select storage_id, user_id, storage_name, storage_phone, storage_title, storage_size, storage_price, storage_address, storage_address_detail, storage_use_date, storage_end_date
        from tbl_storage
        where storage_id = #{storageId}
    </select>
    <!-- 전체조회 -->
    <select id="selectAll" resultType="storageVO">
        select storage_id, user_id, storage_name, storage_phone, storage_title, storage_size, storage_price, storage_address, storage_address_detail, storage_use_date, storage_end_date
        from tbl_storage
        order by storage_id
        <if test="page.searchDTO.isDesc">
            desc
        </if>
        limit #{page.criteria.startRow}, #{page.criteria.amount}
    </select>
    <!-- 검색조건에 맞는 테이블 불러옴(페이징처리) -->
    <select id="selectBy" resultType="storageVO">
        select storage_id, user_id, storage_name, storage_phone, storage_title, storage_size, storage_price, storage_address, storage_address_detail,
        storage_use_date, storage_end_date
        from tbl_storage
        <include refid="searchType"/>
        order by storage_id
        <if test="page.searchDTO.isDesc">
            desc
        </if>
        limit #{page.criteria.startRow}, #{page.criteria.amount}
    </select>
    <select id="total" resultType="int">
        select count(storage_id) from tbl_storage
    </select>
    <!-- 검색조건에 맞는 총 갯수 -->
    <select id="totalBy" resultType="int">
        select count(storage_id) from tbl_storage
        <include refid="searchType"/>
    </select>
    <!--  PageDTO인지 SearchDTO인지 판별  -->
    <sql id="searchType">
        <choose>
            <when test="page.IS_SEARCH_DTO">
                <bind name="dto" value="page"/>
            </when>
            <otherwise>
                <bind name="dto" value="page.searchDTO"/>
            </otherwise>
        </choose>
        <include refid="searchContext"/>
    </sql>
    <!--  조건에 맞는 테이블 검색조건  -->
    <sql id="searchContext">
        where
        <trim prefixOverrides="and">
            <foreach collection="dto.types" item="type">
                <trim prefix="and">
                    <choose>
                        <when test="type == 'userId'.toString()">
                            user_id = #{dto.userId}
                        </when>
                        <when test="type == 'storageId'.toString()">
                            storage_id = #{dto.storageId}
                        </when>
                        <when test="type == 'keyword'.toString()">
                            storage_title like concat('%', #{dto.keyword}, '%')
                        </when>
                        <when test="type == 'storageAddress'.toString()">
                            storage_address like concat('%', #{dto.storageAddress}, '%')
                        </when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>
    <!--user-storage join 전체 조회-->
    <select id="selectStorageAll" resultType="storageDTO">
        select u.user_id, user_identification, user_password, user_email, user_phone, user_address, user_address_detail, user_gender, user_birth, user_name,
        storage_id, storage_name, storage_phone, storage_title, storage_size, storage_price, storage_address, storage_address_detail, storage_use_date, storage_end_date
        from tbl_user u join tbl_storage s on u.user_id = s.user_id
        <if test="page.searchDTO.isDesc">
            desc
        </if>
        limit #{page.criteria.startRow}, #{page.criteria.amount}
    </select>

    <!-- 창고DTO 조회 -->
    <select id="selectAllBy" resultType="storageDTO">
        select storage_id, u.user_id, storage_name, storage_phone, storage_title, storage_size, storage_price, storage_address, storage_address_detail, storage_use_date, storage_end_date,
        user_identification, user_email, user_phone, user_address, user_address_detail, user_gender, user_birth, user_name
        from
        (
        select user_id, user_identification, user_email, user_phone, user_address, user_address_detail, user_gender, user_birth, user_name
        from tbl_user
        ) u
        join
        (
        select storage_id, user_id, storage_title, storage_size, storage_price, storage_address, storage_address_detail, storage_use_date, storage_end_date
        from tbl_storage
        <!--<include refid="searchType"/>-->
        ) r on u.user_id = r.user_id
        having storage_id = #{storageId}
        <!--order by storage_id desc
        <if test="page.searchDTO.isDesc">
            desc
        </if>-->
    </select>

    <!-- 창고DTO 조건조회 -->
    <select id="selectDTOAllBy" resultType="storageDTO">
        select storage_id, u.user_id, storage_name, storage_phone, storage_title, storage_size, storage_price, storage_address, storage_address_detail, storage_use_date, storage_end_date,
        user_identification, user_email, user_phone, user_address, user_address_detail, user_gender, user_birth, user_name
        from
        (
        select user_id, user_identification, user_email, user_phone, user_address, user_address_detail, user_gender, user_birth, user_name
        from tbl_user
        ) u
        join
        (
        select storage_id, user_id, storage_name, storage_phone,storage_title, storage_size, storage_price, storage_address, storage_address_detail, storage_use_date, storage_end_date
        from tbl_storage
        <include refid="searchType"/>
        ) r on u.user_id = r.user_id
        order by storage_id desc
        <if test="page.searchDTO.isDesc">
            desc
        </if>
    </select>

    <!-- 메인에서 보이는 신규창고조회 -->
    <select id="selectDTOAll" resultType="storageDTO">
        select storage_id, u.user_id, storage_name, storage_phone, storage_title, storage_size, storage_price, storage_address, storage_address_detail, storage_use_date, storage_end_date,
        user_identification, user_email, user_phone, user_address, user_address_detail, user_gender, user_birth, user_name
        from
        (
        select user_id, user_identification, user_email, user_phone, user_address, user_address_detail, user_gender, user_birth, user_name
        from tbl_user
        ) u
        join
        (
        select storage_id, user_id, storage_name, storage_phone,storage_title, storage_size, storage_price, storage_address, storage_address_detail, storage_use_date, storage_end_date
        from tbl_storage
        ) r on u.user_id = r.user_id
        order by storage_id desc
    </select>
    <!-- 메인에서 보이는 리뷰창고조회 -->
    <select id="selectStorageDTOAll" resultType="storageDTO">
        select u.user_id, s.storage_id, s.storage_title, s.storage_price, count(r.review_id)
        from tbl_user u
        join tbl_storage s on u.user_id = s.user_id
        join tbl_review r on s.storage_id = r.storage_id
        group by u.user_id, s.storage_id, s.storage_title, s.storage_price
        order by count(r.review_id) desc
    </select>
</mapper>