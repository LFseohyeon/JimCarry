<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.jimcarry.mapper.UserMapper">
    <insert id="insert" useGeneratedKeys="true" keyProperty="userId">
        insert into tbl_user
        (user_identification, user_password, user_name, user_email, user_phone, user_address, user_address_detail, user_gender, user_birth, user_status)
        values(#{userIdentification}, #{userPassword}, #{userName}, #{userEmail}, #{userPhone}, #{userAddress}, #{userAddressDetail}, #{userGender}, #{userBirth}, #{userStatus})
    </insert>
    <select id="select" resultType="userVO">
        select user_id, user_identification, user_password, user_email, user_name, user_phone, user_address, user_address_detail, user_gender, user_birth, user_status
        from tbl_user
        where user_id = #{userId}
    </select>
    <select id="selectAllBy" resultType="userVO">
        select user_id, user_identification, user_password, user_email, user_name, user_phone, user_address,
        user_address_detail, user_gender, user_birth, user_status
        from tbl_user
        <include refid="searchType"/>
        order by user_id
        <if test="page.searchDTO.isDesc">
            desc
        </if>
        limit #{page.criteria.startRow}, #{page.criteria.amount}
    </select>
    <select id="selectAll" resultType="userVO">
        select user_id, user_identification, user_password, user_email, user_name, user_phone, user_address,
        user_address_detail, user_gender, user_birth, user_status
        from tbl_user
        order by user_id
        <if test="page.searchDTO.isDesc">
            desc
        </if>
        limit #{page.criteria.startRow}, #{page.criteria.amount}
    </select>
    <select id="total" resultType="int">
        select count(user_id) from tbl_user
    </select>
    <select id="totalBy" resultType="int">
        select count(user_id) from tbl_user
        <include refid="searchType"/>
    </select>
    <select id="selectByIdentificationAndPassword" resultType="userVO">
        select user_id, user_identification, user_password, user_email, user_name, user_phone, user_address,
        user_address_detail, user_gender, user_birth, user_status from tbl_user
        where user_identification = #{userIdentification} and user_password = #{userPassword}
    </select>
    <select id="selectByIdentification" resultType="int">
        select count(user_id) from tbl_user
        where user_identification = #{userIdentification}
    </select>
    <select id="selectByEmail" resultType="int">
        select count(user_id) from tbl_user
        where user_email = #{userEmail}
    </select>
    <update id="update">
        update tbl_user
        set user_identification=#{userIdentification}, user_password=#{userPassword}, user_email=#{userEmail}, user_name=#{userName},
        user_phone=#{userPhone}, user_address=#{userAddress}, user_address_detail=#{userAddressDetail}, user_gender=#{userGender}, user_birth=#{userBirth}
        where user_id= #{userId};
    </update>
    <delete id="delete" parameterType="long">
        delete from tbl_user
        where user_id = #{userId}
    </delete>
    <!--  PageDTO인지 SearchDTO인지 판별  -->
    <!-- not 연산자와 ! 연산자 모두 가능 -->
    <sql id="searchType">
        <choose>
            <when test="page.IS_SEARCH_DTO">
                <bind name="dto" value="page"/>
            </when>
            <otherwise>
                <bind name="dto" value="page.searchDTO"/>
            </otherwise>
        </choose>
        <if test="dto.types != null">
            <include refid="searchContext"/>
        </if>
    </sql>
    <!--  조건에 맞는 테이블 검색조건  -->
    <sql id="searchContext">
        where
        <trim prefixOverrides="and">
            <foreach collection="dto.types" item="type">
                <trim prefix="and">
                    <choose>
                        <when test="type == 'userId'.toString()">
                            user_id = #{dto.userId}
                        </when>
                        <when test="type == 'keyword'.toString()">
                            user_identification like concat('%', #{dto.keyword}, '%')
                        </when>
                        <when test="type == 'userAddress'.toString()">
                            user_address like concat('%', #{dto.userAddress}, '%')
                        </when>
                        <when test="type == 'userName'.toString()">
                            user_name like concat('%', #{dto.userName}, '%')
                        </when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>
    <!--  이름, 핸드폰 번호로 아이디 찾기  -->
    <select id="selectByPhoneAndNameOrIdentification" resultType="userVO">
        select user_id, user_identification, user_password, user_email, user_name, user_phone, user_address, user_address_detail, user_gender, user_birth, user_status
        from tbl_user
        where user_phone = #{userPhone}
        <if test="userName != null">
            and user_name = #{userName}
        </if>
        <if test="userIdentification != null">
            and user_identification = #{userIdentification}
        </if>
    </select>
    <!--  비밀번호 변경  -->
    <update id="updatePasswordByIdentification">
        update tbl_user
        set user_password = #{userPassword}
        where user_identification = #{userIdentification}
    </update>
    <!--  이름, 이메일로 찾기  -->
    <select id="selectByEmailAndNameOrIdentification" resultType="userVO">
        select user_id, user_identification, user_password, user_email, user_name, user_phone, user_address, user_address_detail, user_gender, user_birth, user_status
        from tbl_user
        where user_email = #{userEmail}
        <if test="userName != null">
            and user_name = #{userName}
        </if>
        <if test="userIdentification != null">
            and user_identification = #{userIdentification}
        </if>
    </select>
    <!-- 총 인원 수 구하기-->
    <select id="selectTotalUser" resultType="int">
        select count(user_id) from tbl_user
    </select>
    <!--  비밀번호 변경 이메일 발송시 랜덤 키 값 컬럼에 저장,
      비밀번호 변경 완료 시 랜덤 키 컬럼 값 삭제 -->
    <update id="updateRandomKeyByUserIdentification">
        update tbl_user
        set user_random_key = #{userRandomKey}
        where user_identification = #{userIdentification}
    </update>
    <!--  아이디로 랜덤키 찾기  -->
    <select id="selectByIdentificationUser" resultType="userVO">
        select user_id, user_identification, user_password, user_email, user_name, user_phone, user_address, user_address_detail, user_gender, user_birth, user_random_key, user_status
        from tbl_user
        where
        <if test="userEmail != null">
            user_email = #{userEmail}
        </if>
        <if test="userIdentification != null">
            user_identification = #{userIdentification}
        </if>
    </select>
</mapper>